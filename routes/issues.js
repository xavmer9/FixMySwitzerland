const express = require('express');
const router = express.Router();
const Issue = require('../models/issue');
const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
const _ = require('lodash');
const formatLinkHeader = require('format-link-header');


/**
* @api {post} /issues Create an Issue
* @apiName CreateIssue
* @apiGroup Issue
* @apiVersion 1.0.0
* @apiDescription Report a new issue.
*
* @apiParam (Issue) {String="new","inProgress", "canceled", "completed"} id Users unique ID.
* @apiParam
* @apiParam {Number} id Users unique ID.
* @apiUse IssueInRequestBody
* @apiUse IssueInResponseBody
* @apiUse IssueValidationError
* @apiSuccess (Response body) {String} id A unique identifier for the issue generated by the server
*
* @apiExample Example
*     POST /issues HTTP/1.1
*     Content-Type: application/json
*
*     {
*       "status": "new",
*       "description": "a psychedelic grafiti on a car",
*       "latitude": "105",
*       "longitude": "45",
*       "tags":["grafiti", "car", "zurich"],
*       "user":"58b566320daad92a58087ad0"
*     }
*
* @apiSuccessExample 201 Created
*     HTTP/1.1 201 Created
*     Content-Type: application/json
*     Location: https://heigvd-webserv-2017-team-1.herokuapp.com/issues/58b6e5f7267d13001103d78c
*
*     {
*        "status": "new",
*        "description": "a psychedelic grafiti on a car",
*        "latitude": "105",
*        "longitude": "45",
*        "tags":["grafiti", "car", "zurich"],
*        "user":"58b566320daad92a58087ad0",
*        "updatedAt": "2017-03-01T08:13:45.138Z",
*        "createdAt": "2017-03-01T08:13:45.132Z",
*        "tags": [
*                "grafiti",
*                "car",
*                "zurich"
*            ],
*      }
*/
router.post('/', function(req, res, next) {
  const newIssue = new Issue(req.body);
  // Save issue
  newIssue.save(function(err, savedIssue) {
    if (err) {
      return next(err);
    }
    // Send the saved document in the response
    res.send(savedIssue);
  });
});



/**
* @api {get} /issues List issues
* @apiName RetrieveIssues
* @apiGroup Issue
* @apiVersion 1.0.0
* @apiDescription Retrieve the list of issues
*
* @apiUse IssueInResponseBody
*
* @apiExample Example
*     GET /issues HTTP/1.1
*
* @apiSuccessExample 200 OK
*     HTTP/1.1 200 OK
*     Content-Type: application/json
*
*[
*  {
*  "_id": "58b56f6a0daad92a58087ad4",
*    "description": "Un graffiti psychedélique !!!",
*    "imageUrl": "pojewoijoiwjroijewerewrewrewrw",
*    "latitude": 45,
*    "longitude": 45,
*    "updateddAt": "2017-02-28T12:39:06.609Z",
*    "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-03-01T09:25:12.810Z",
*    "createdAt": "2017-03-01T08:13:45.132Z",
*    "tags": [
*      "test",
*    "test22"
*    ],
*    "status": "inProgress"
*  },
*  {
*    "_id": "58b5ea3c1116c51b88310bde",
*    "description": "Un autre graffiti psychedélique !!!",
*    "imageUrl": "graff_wopla.png",
*    "latitude": 35,
*    "longitude": 145,
*    "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-02-28T21:23:08.505Z",
*    "createdAt": "2017-02-28T21:23:08.484Z",
*    "tags": [
*      "accident",
*      "graff",
*    ],
*    "status": "new"
*  },
*/
/**
*@api {get} /issues List issues filtered paginated
* @apiName RetrieveAllIssuesFromSpecificUser
* @apiGroup Issue
* @apiVersion 1.0.0
* @apiDescription Retrieves a list of issues from a specific user
* @apiUse UserIdInUrlPath
* @apiUse IssueInResponseBody
* @apiUse IssueNotFoundError
*
@apiExample Example
*     GET /issues?user=58b56f2c0daad92a58087ad2 HTTP/1.1
*
* @apiSuccessExample 200 OK
*     HTTP/1.1 200 OK
*     Content-Type: application/json
*
* [
*  {
*    "_id": "58b56f6a0daad92a58087ad4",
*    "description": "Un graffiti psychedélique !!!",
*    "imageUrl": "pojewoijoiwjroijewerewrewrewrw",
*    "latitude": 45,
*    "longitude": 45,
*    "updateddAt": "2017-02-28T12:39:06.609Z",
*    "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-03-01T09:25:12.810Z",
*    "createdAt": "2017-03-01T08:13:45.132Z",
*    "tags": [
*      "test",
*      "test22"
*    ],
*    "status": "inProgress"
*  },
*  {
*    "_id": "58b5ea3c1116c51b88310bde",
*    "description": "Un autre graffiti psychedélique !!!",
*    "imageUrl": "graff_wopla.png",
*    "latitude": 35,
*    "longitude": 145,
*    "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-02-28T21:23:08.505Z",
*    "createdAt": "2017-02-28T21:23:08.484Z",
*    "tags": [
*      "accident",
*      "graff"
*    ],
*    "status": "new"
*  },
*  {
*    "_id": "58b67c5a3a6f783b40a7f9ad",
*    "description": "Un autre graffiti psychedélique !!!",
*    "imageUrl": "graff_wopla.png",
*    "latitude": 35,
*    "longitude": 145,
*  "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-03-01T07:46:34.116Z",
*    "createdAt": "2017-03-01T07:46:34.089Z",
*    "tags": [
*      "accident",
*      "graff",
*    ],
*    "status": "inProgress"
*  },
*  {
*    "_id": "58b682b944c48438d4cf6da7",
*    "description": "Un autre graffiti psychedélique !!!!!!",
*    "imageUrl": "graff_wopla.png",
*    "latitude": 45,
*    "longitude": 70,
*    "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-03-01T08:13:45.138Z",
*    "createdAt": "2017-03-01T08:13:45.132Z",
*    "tags": [
*      "accident",
*      "graff",
*      "mal à l'aise"
*    ],
*    "status": "inProgress"
*  }
*]
*/
router.get('/', function(req, res, next) {

  // Count total movies matching the URL query parameters
  const countQuery = queryIssues(req);
  countQuery.count(function(err, total) {
    if (err) {
      return next(err);
    }

    // Prepare the initial database query from the URL query parameters
    let query = queryIssues(req);

    // Paginate
    query = paginate('/issues', query, total, req, res);

    // Execute the query
    query.sort({ title: 1 }).exec(function(err, issues) {
      if (err) {
        return next(err);
      }

      res.send(issues);
    });
  });
});

/**
* Returns a Mongoose query that will retrieve issues filtered with the URL query parameters.
*/
function queryIssues(req) {

  let query = Issue.find();

  if (Array.isArray(req.query.user)) {
    const users = req.query.user.filter(ObjectId.isValid);
    query = query.where('user').in(users);
  } else if (ObjectId.isValid(req.query.user)) {
    query = query.where('user').equals(req.query.user);
  }

  if (!isNaN(req.query.status)) {
    query = query.where('status').equals(req.query.status);
  }
  return query;
}

/**
* Paginates a database query and adds a Link header to the response (if applicable).
*
* @param {String} resourceHref - The hyperlink reference of the collection (e.g. "/api/people")
* @param {MongooseQuery} query - The database query to paginate
* @param {Number} total - The total number of elements in the collection
* @param {ExpressRequest} req - The Express request object
* @param {ExpressResponse} res - The Express response object
* @returns The paginated query
*/
function paginate(resourceHref, query, total, req, res) {

  // Parse the "page" URL query parameter indicating the index of the first element that should be in the response
  let page = parseInt(req.query.page, 10);
  if (isNaN(page) || page < 1) {
    page = 1;
  }

  // Parse the "pageSize" URL query parameter indicating how many elements should be in the response
  let pageSize = parseInt(req.query.pageSize, 10);
  if (isNaN(pageSize) || pageSize < 0 || pageSize > 100) {
    pageSize = 100;
  }

  // Apply the pagination to the database query
  query = query.skip((page - 1) * pageSize).limit(pageSize);

  const links = {};
  const baseUrl = process.env.BASE_URL || `http://localhost:${process.env.PORT || '3000'}`;
  const url = baseUrl + resourceHref;
  const maxPage = Math.ceil(total / pageSize);

  // Add first & prev links if current page is not the first one
  if (page > 1) {
    links.first = { rel: 'first', url: `${url}?page=1&pageSize=${pageSize}` };
    links.prev = { rel: 'prev', url: `${url}?page=${page - 1}&pageSize=${pageSize}` };
  }

  // Add next & last links if current page is not the last one
  if (page < maxPage) {
    links.next = { rel: 'next', url: `${url}?page=${page + 1}&pageSize=${pageSize}` };
    links.last = { rel: 'last', url: `${url}?page=${maxPage}&pageSize=${pageSize}` };
  }

  // If there are any links (i.e. if there is more than one page),
  // add the Link header to the response
  if (Object.keys(links).length >= 1) {
    res.set('Link', formatLinkHeader(links));
  }

  return query;
};

/**
* @api {get} /issue/:id Retrieve an issue
* @apiName RetrieveIssue
* @apiGroup Issue
* @apiVersion 1.0.0
* @apiDescription Retrieves one issue.
*
* @apiUse IssueIdInUrlPath
* @apiUse IssueInResponseBody
* @apiUse IssueNotFoundError
*
* @apiExample Example
*     GET /Issue/ HTTP/1.1
*
* @apiSuccessExample 200 OK
*     HTTP/1.1 200 OK
*     Content-Type: application/json
*
* {
*    "_id": "58b5ea3c1116c51b88310bde",
*    "description": "Un autre graffiti psychedélique !!!",
*    "imageUrl": "graff_wopla.png",
*    "latitude": 35,
*    "longitude": 145,
*    "__v": 0,
*    "user": "58b56f2c0daad92a58087ad2",
*    "updatedAt": "2017-02-28T21:23:08.505Z",
*    "createdAt": "2017-02-28T21:23:08.484Z",
*    "tags": [
*      "accident",
*      "graff",
*      "mal à l'aise"
*    ],
*    "status": "new"
*  },
*/
router.get('/:id', loadIssueFromParamsMiddleware, function(req, res, next) {
  res.send(req.issue);
});

/**
* @api {patch} /issues/:id patch/update an issue
* @apiName PatchUpdateIssue
* @apiGroup Issue
* @apiVersion 1.0.0
* @apiDescription Patch/Update an issue's data (the entire or few elements)
*
* @apiUse IssueIdInUrlPath
* @apiUse IssueInRequestBody
* @apiUse IssueInResponseBody
* @apiUse IssueNotFoundError
* @apiUse IssueValidationError
*
* @apiExample Example
*     PATCH /issues/58b56f6a0daad92a58087ad4 HTTP/1.1
*     Content-Type: application/json
*
*     {
*       "status": "inProgress"
*     }
*
* @apiSuccessExample 200 OK
*     HTTP/1.1 200 OK
*     Content-Type: application/json
*
*  {
*  "_id": "58b56f6a0daad92a58087ad4",
*  "description": "oiwejoijewoijre",
*  "imageUrl": "pojewoijoiwjroijew",
*  "latitude": 45,
*  "longitude": 45,
*  "updateddAt": "2017-02-28T12:39:06.609Z",
*  "__v": 0,
*  "user": "58b56f2c0daad92a58087ad2",
*  "updatedAt": "2017-03-13T11:54:00.341Z",
*  "createdAt": "2017-03-01T08:13:45.132Z",
*  "tags": [
*    "test",
*    "test22"
*  ],
*  "status": "inProgress"
*}
*
*/
router.patch('/:id', loadIssueFromParamsMiddleware, function(req, res, next) {

  // Update a property or several
  const whitelist = _.pick(req.body, ['status', 'description', 'imageUrl', 'latitude', 'longitude', 'updatedAt']); //create a whitelist of properties to be changed
  _.assignIn(req.issue, whitelist);

  req.issue.save(function(err, savedIssue) {
    if (err) {
      return next(err);
    }
    res.send(savedIssue);
  });
});

/**
* @api {delete} /issue/:id Delete an issue
* @apiName RetrieveIssue
* @apiGroup Issue
* @apiVersion 1.0.0
* @apiDescription Delete one issue.
*
* @apiUse IssueIdInUrlPath
* @apiUse IssueInResponseBody
* @apiUse IssueNotFoundError
*
* @apiExample Example
*     DELETE /Issue/58b5ea3c1116c51b88310bde HTTP/1.1
*
* @apiSuccessExample 204 No content
*     HTTP/1.1 204 No content
*
*/
router.delete('/:id', loadIssueFromParamsMiddleware, function(req, res, next) {
  req.issue.remove(function(err) {
    if(err) {
      return next(err);
    }
    return res.sendStatus(204);
  });
});

/**
* Responds with 404 Not Found if the ID is not valid or the person doesn't exist.
*/
function loadIssueFromParamsMiddleware(req, res, next) {

  const issueId = req.params.id;
  if (!ObjectId.isValid(issueId)) {
    return issueNotFound(res, issueId);
  }

  Issue.findById(req.params.id, function(err, issue) {
    if (err) {
      return next(err);
    } else if (!issue) {
      return issueNotFound(res, issueId);
    }

    req.issue = issue;
    next();
  });
}

/**
* Responds with 404 Not Found and a message indicating that the issue with the specified ID was not found.
*/
function issueNotFound(res, issueId) {
  return res.status(404).type('text').send(`No issue found with ID ${issueId}`);
}

module.exports = router;
