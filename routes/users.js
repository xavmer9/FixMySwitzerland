var express = require('express');
var router = express.Router();
const User = require('../models/user');
const Issue = require('../models/issue');
const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
const _ = require('lodash');

/**
 * @api {get} users List users
 * @apiName RetrieveUsers
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a list of user sorted by last name (in alphabetical order).
 *
 * @apiExample Example
 *     GET /users
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: https://heigvd-webserv-2017-team-1.herokuapp.com/users
 *
 *     [
 *        {
 *         "_id": "58b6e58e267d13001103d78b",
 *         "firstName": "Maic",
 *         "lastName": "Anthoine",
 *         "role": "citizen",
 *         "__v": 0,
 *         "createdAt": "2017-03-01T15:15:26.367Z",
 *         "reportedIssueCount": 1
 *       }
 *     ]
 */
router.get('/', function(req, res, next) {
  //Find all the users in the db and sort it by lastName
  User.find().sort('lastName').exec(function(err, users) {
    if (err) {
      return next(err);
    }

    // Get the documents' IDs
    const userIds = users.map(user => user._id);


    //Aggregation to count issues of each users
    Issue.aggregate([
      {
        $match: { // Select issues reported by the people we are interested in
          user: { $in: userIds }
        }
      },
      {
        $group: { // Group the documents by user ID
          _id: '$user',
          issueCount: { // Count the number of issues for that ID
            $sum: 1
          }
        }
      }
    ], function(err, results) {
      if (err) {
        return next(err);
      }
        // Convert the Person documents to JSON
        const userJson = users.map(user => user.toJSON());

        // For each result...
        results.forEach(function(result) {
          // Get the user ID (that was used to $group)...
          const resultId = result._id.toString();
          // Find the corresponding person...
          const correspondingUser = userJson.find(user => user._id == resultId);
          // And attach the new property
          correspondingUser.reportedIssueCount = result.issueCount;

        });
        // Send the enriched response
        res.send(userJson);
    });
  });
});


/**
* @api {post} users Create a user
* @apiName CreateUser
* @apiGroup User
* @apiVersion 1.0.0
* @apiDescription Create a new user.
*
* @apiSuccess (Response body) {String} id A unique identifier for the user generated by the server
*
* @apiExample Example
*     POST /users HTTP/1.1
*     Content-Type: application/json
*
*     {
*      	"firstName":"Shadia",
*      	"lastName":"Hugg",
*      	"role":"citizen"
*     }
*
* @apiSuccessExample 201 Created
*     HTTP/1.1 201 Created
*     Content-Type: application/json
*     Location: https://heigvd-webserv-2017-team-1.herokuapp.com/users/
*
*   {
*     "__v": 0,
*     "firstName": "Shadia",
*     "lastName": "Hugg",
*     "role": "citizen",
*     "_id": "58b6ea79267d13001103d78e",
*     "createdAt": "2017-03-01T15:36:25.306Z"
*   }
*/
router.post('/', function(req, res, next) {
  // Create a new document from the JSON in the request body
  const newUser = new User(req.body);
  // Save the document
  newUser.save(function(err, savedUser) {
    if (err) {
      return next(err);
    }
    // Send the saved document in the response
    res.send(savedUser);
  });
});

/**
 * @api {get} users/:id Retrieve a user
 * @apiName RetrieveUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one user.
 *
 *
 * @apiExample Example
 *     GET /users/58b6ea79267d13001103d78e HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Location: https://heigvd-webserv-2017-team-1.herokuapp.com/users/58b6ea79267d13001103d78e
 *
 *     {
 *        "_id": "58b6ea79267d13001103d78e",
 *        "firstName": "Shadia",
 *        "lastName": "Hugg",
 *        "role": "citizen",
 *        "__v": 0,
 *        "createdAt": "2017-03-01T15:36:25.306Z"
 *      }
 */
router.get('/:id', loadUserFromParamsMiddleware, function(req, res, next) {
    res.send(req.user);
});

/**
 * @api {get} users/:id/issues Retrieve all issues of a user
 * @apiName RetrieveIssuesFromAUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves all issues of one user.
 *
 *
 * @apiExample Example
 *     GET /users/58b6ea79267d13001103d78e/issues HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Location: https://heigvd-webserv-2017-team-1.herokuapp.com/users/58b6ea79267d13001103d78e/issues
 *
 *  [
 *    {
 *      "_id": "58b6e5f7267d13001103d78c",
 *      "description": "a psychedelic graffiti",
 *      "imageUrl": "graff_wopla.png",
 *      "latitude": 38,
 *      "longitude": 122,
 *      "__v": 0,
 *      "user": "58b6e58e267d13001103d78b",
 *      "updatedAt": "2017-03-13T07:34:23.024Z",
 *      "createdAt": "2017-03-01T15:17:11.632Z",
 *      "tags": [
 *        "psychedelic",
 *        "graff",
 *        "zurich"
 *      ],
 *      "status": "inProgress"
 *    }
 *  ]
 */
router.get('/:id/issues', loadUserFromParamsMiddleware, function(req, res, next) {
  Issue.find().sort('updatedAt').exec(function(err, issues) {
    if (err) {
      return next(err);
    }
    //console.log(issues);
    res.send(issues);
  });
});

/**
 * @api {patch} users/:id Update an existing user
 * @apiName UpdateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Update one or multiples parameters of an existing user
 *
 *
 * @apiExample Example
 *     GET /users/58b6ea79267d13001103d78e HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Location: https://heigvd-webserv-2017-team-1.herokuapp.com/users/58b6ea79267d13001103d78e
 *
 * {
 *  "_id": "58b6ea79267d13001103d78e",
 *  "firstName": "Shadia",
 *  "lastName": "Huggenberger",
 *  "role": "citizen",
 *  "__v": 0,
 *  "createdAt": "2017-03-01T15:36:25.306Z"
 * }
 */
router.patch('/:id', loadUserFromParamsMiddleware, function(req, res, next) {

  // Update a property or several
  const whitelist = _.pick(req.body, ['firstName', 'lastName', 'role']); //create a whitelist of properties to be changed
  _.assignIn(req.user, whitelist);

  req.user.save(function(err, savedUser) {
    if (err) {
      return next(err);
    }

    res.send(savedUser);
  });
});

/**
 * @api {delete} users/:id Delete a user
 * @apiName DeleteUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Delete a user
 *
 *
 * @apiExample Example
 *     GET /users/58b6ea79267d13001103d78e HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Location: https://heigvd-webserv-2017-team-1.herokuapp.com/users/58b6ea79267d13001103d78e
 *
 */
router.delete('/:id', loadUserFromParamsMiddleware, function(req, res, next) {
  req.user.remove(function(err) {
    if (err) {
      return next(err);
    }
    res.sendStatus(204);
  });
});

/**
 * Middleware that loads the person corresponding to the ID in the URL path.
 * Responds with 404 Not Found if the ID is not valid or the person doesn't exist.
 */
function loadUserFromParamsMiddleware(req, res, next) {

  const userId = req.params.id;
  if (!ObjectId.isValid(userId)) {
    return userNotFound(res, userId);
  }

  User.findById(req.params.id, function(err, user) {
    if (err) {
      return next(err);
    } else if (!user) {
      return userNotFound(res, userId);
    }

    req.user = user;
    next();
  });
}

/**
 * Responds with 404 Not Found and a message indicating that the person with the specified ID was not found.
 */
function userNotFound(res, userId) {
  return res.status(404).type('text').send(`No user found with ID ${userId}`);
}

module.exports = router;
